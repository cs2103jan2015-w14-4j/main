//@author: a0101735r



	/**
	 * origin: ../src/\TaskTableModel.java
	 */


//based on RowTableModel

public class TaskTableModel extends AbstractTableModel {

    private static ArrayList<String[]>taskArrayString;
    protected ArrayList<String> columnNames;
    protected Class[] columnClasses;
    protected Boolean[] isColumnEditable;
    private Class rowClass = Object.class;
    private boolean isModelEditable = true;

    private static final long serialVersionUID = 1L;

    /**
     *  Full Constructor for creating a <code>RowTableModel</code>.
     *
     *  Each item in the <code>modelData</code> List must also be a List Object
     *  containing items for each column of the row.
     *
     *  Each column's name will be taken from the <code>columnNames</code>
     *  List and the number of columns is determined by the number of items
     *  in the <code>columnNames</code> List.
     *
     *  @param modelData	the data of the table
     *  @param columnNames	<code>List</code> containing the names
     *						of the new columns
     *  @param rowClass     the class of row data to be added to the model
     */
    public TaskTableModel(ArrayList<String[]> modelData, ArrayList<String> columnNames, Class rowClass) {
        setDataAndColumnNames(modelData, columnNames);
        setRowClass( rowClass );
    }

    protected void setDataAndColumnNames(ArrayList<String[]> modelData, ArrayList<String> columnNames) {
        taskArrayString = modelData;
        this.columnNames = columnNames;
        columnClasses = new Class[getColumnCount()];
        isColumnEditable = new Boolean[getColumnCount()];
        fireTableStructureChanged();
    }

    protected void setRowClass(Class rowClass) {
        this.rowClass = rowClass;
    }

    public Class getColumnClass(int column) {
        Class columnClass = null;

        //  Get the class, if set, for the specified column
        if (column < columnClasses.length)
            columnClass = columnClasses[column];

        //  Get the default class
        if (columnClass == null)
            columnClass = super.getColumnClass(column);

        return columnClass;
    }

    @Override
    public int getRowCount() {
        return taskArrayString.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.size();
    }

    /**
     * Returns the column name.
     *
     * @return a name for this column using the string value of the
     * appropriate member in <code>columnNames</code>. If
     * <code>columnNames</code> does not have an entry for this index
     * then the default name provided by the superclass is returned
     */
    public String getColumnName(int column) {
        Object columnName = null;

        if (column < columnNames.size()) {
            columnName = columnNames.get( column );
        }

        return (columnName == null) ? super.getColumnName( column ) : columnName.toString();
    }


    /**
     * Returns true regardless of parameter values.
     *
     * @param   row		   the row whose value is to be queried
     * @param   column		the column whose value is to be queried
     * @return				  true
     */
    public boolean isCellEditable(int row, int column) {
        Boolean isEditable = null;

        if (column < isColumnEditable.length) {
            isEditable = isColumnEditable[column];
        }

        return (isEditable == null) ? isModelEditable : isEditable.booleanValue();
    }


    /**
     * Returns value of cell at stated location
     */
    @Override
    public String getValueAt(int rowIndex, int columnIndex) {
        String[] task = taskArrayString.get(rowIndex);
        String value = null;
        value = task[columnIndex];

        return value;
    }  

    /**
     *  Adds a row of data to the end of the model.
     *  Notification of the row being added will be generated.
     *
     * @param   rowData		 data of the row being added
     */
    public void addRow(String[] rowData) {
        insertRow(getRowCount(), rowData);
    }

    /**
     *  Inserts a row of data at the row specified.
     *  Notification of the row being added will be generated.
     *
     * @param   rowData		 data of the row being added
     */
    public void insertRow(int row, String[] rowData) {
        taskArrayString.add(row, rowData);
        fireTableRowsInserted(row, row);
    }

    public String[] getRow(int row) {
        return taskArrayString.get( row );
    }

    /**
     *  Insert multiple rows of data at the row specified.
     *  Notification of the row being added will be generated.
     *
     * @param   row	  row in the model where the data will be inserted
     * @param   rowList  each item in the list is a separate row of data
     */
    public void insertRows(int row, ArrayList<String[]> rowList) {	
        taskArrayString.addAll(row, rowList);
        fireTableRowsInserted(row, row + rowList.size() - 1);
    }

    /**
     * Removes rows between start and end.
     * 
     * @param start
     * @param end
     */
    public void removeRowRange(int start, int end) {
        taskArrayString.subList(start, end ).clear();
        fireTableDataChanged();
    }

    /**
     * Removes rows specified
     * *Unused*
     * 
     * @param rows
     */
    public void removeRows(int... rows) {
        for (int i = rows.length - 1; i >= 0; i--) {
            int row = rows[i];

            taskArrayString.remove(row);
            fireTableRowsDeleted(row, row);
        }
    }

    /**
     * Refreshes whole table with new input data.
     * 
     * @param tableData
     */
    public void refreshTable(ArrayList<String[]> tableData) {
        ArrayList<String[]> newData = new ArrayList<String[]>(tableData);
        clearTable();
        insertRows(0, newData);
    }

    public void clearTable() {
        removeRowRange(0 ,getRowCount());
    }
}     

	// End of segment: ../src/\TaskTableModel.java





	/**
	 * origin: ../src/\UserInterface.java
	 */

/**
 * This class creates the User Interface which handles all user interactions.
 *
 */

@SuppressWarnings("serial")
public class UserInterface {

    public JFrame frame_;
    private JTextField textField_;
    private JTextArea outputArea_;
    private JTextPane sysFeedbackArea_;
    private JTable taskTable_;
    private JTable shortcutTable_;
    private JTableHeader taskHeader_;
    private JTableHeader shortcutHeader_;
    private TaskTableModel model_;
    private JScrollPane scrollPaneMain_;
    private JScrollPane scrollPaneInput_;
    private ArrayList<String[]> outputArrayString_;
    private ArrayList<String[]> shortcutArrayString_;
    private String prevInput_;
    private SystemHandler mainHandler;

    //setting values for column widths in percentage
    // column widths for task table
    private static final double COLUMN_taskID = 8, 
            COLUMN_taskName = 30,
            COLUMN_dateFrom = 10,
            COLUMN_dateTo = 10,
            COLUMN_location = 15,
            COLUMN_details = 17,
            COLUMN_status = 10;

    private static final double COLUMN_systemKW = 15,
            COLUMN_userDefinedKW = 85;   

    private static final double[] TASK_PREFERRED_COLUMN_WIDTHS = {COLUMN_taskID,
        COLUMN_taskName,
        COLUMN_dateFrom,
        COLUMN_dateTo,
        COLUMN_location, 
        COLUMN_details,
        COLUMN_status}; 
    private static final double[] SHORTCUT_PREFERRED_COLUMN_WIDTHS = {COLUMN_systemKW,
        COLUMN_userDefinedKW};

    private static final int WINDOW_WIDTH = 1200;

    private static final String HEADER_SC_1 = "System Action";
    private static final String HEADER_SC_2 = "User-Defined Keywords";

    private static final String HEADER_TASK_1 = "Task";
    private static final String HEADER_TASK_2 = "Task Title";
    private static final String HEADER_TASK_3 = "Start Date";
    private static final String HEADER_TASK_4 = "End Date";
    private static final String HEADER_TASK_5 = "Location";
    private static final String HEADER_TASK_6 = "Remarks";
    private static final String HEADER_TASK_7 = "Status";

    private final static String newline = "\n";	
    private static final String APP_NAME = "Flexi Tracker";
    private static final String MSG_WELCOME = "Welcome to Flexi Tracker!";
    private static final String MSG_HELP = "If you need any help in adding a new task, type \"help\", or consult the user manual.";
    private static final String MSG_EMPTY_TASKLIST = "There are no tasks to display.";
    private static final String EMPTY = " ";
    private static final String OVERDUE  = "Overdue";
    private static final String[] EMPTYROW = {EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY};
    private static final String[][] NO_TASKS = {{MSG_EMPTY_TASKLIST},
        {newline},
        {newline},
        {MSG_HELP}};

    private static final String[] SYS_KEYWORDS = {"Create a new task", "Edit an existing task", 
        "View list of tasks", "Delete a task", 
        "Clear a field", "Search","Undo", "Redo", "Update task status",
        "Add a new keyword", "View available keywords", "Delete a keyword", 
        "Reset keywords", "Create a template", "Edit existing template", 
        "View list of templates", "Use a template", "Delete a template",
        "Clear all templates", "Help","Change saved file location"};

    public static final String[][] HELP = { 
        {"GETTING STARTED:"+newline},
        {"  Start adding new tasks by using the keyword \"add [task title]\" followed by the task details."},	

        {"      eg. \"add Meeting at room 303 on 27/2/2015 from 2pm to 4pm\"   OR"},
        {"      eg. \"add Meeting from 1400 to 1600 on 27th July at room 302\""},
        {"  Both inputs are accepted and will create a task with the same details."},
        {newline},
        {"Accepted field markers are  (non-case-sensitive):"},
        {"     \"On, By, Before\" for deadlines,"},
        {"     \"From and To \" for durations,"},
        {"     \"At\" for locations, and"},
        {"     \"Remarks\" to add any additional remarks or details."},
        {newline},
        {"  Feel free to leave any fields you don't need blank, only the task title is needed to create a new task."},
        {"  Many variations of inputs are accepted, experiment and find the best fit for you!" + newline},
        {newline},
        {"VIEWING THE TASK LIST"},
        {"  If you enter an empty line, the default view mode  will be displayed, where all ongoing tasks will be sorted by date."},
        {"  To view a specific range of tasks, type \"view [status] by [sort order]\"."},
        {"  If the sort order does not matter, you can just type \"view [status]\", or "},
        {"  if you want to sort the list without filtering, type \"view by [sort order]\"."}, 
        {newline},
        {"UPDATING TASKS"},
        {"  New Tasks are set to the \"Normal\" status by default."},
        {"  Mark or change the status of a task by typing \"mark [task ID] as [status]\""},
        {"  Accepted statuses are:"},
        {"        Urgent , Major, Normal, Minor, Casual, Complete."},
        {"  Tasks will be automatically set to \"Overdue\" and highlighted if an incomplete task is past its due date."}, 
        {newline},
        {"  Edit other task information by using \"edit [task ID]\" followed by the information you want to change, such as:"},
        {"      eg. \"edit 12 at room 303\""},
        {"  The above example will change the location field of task 12 to \"room 303\"."},
        {newline},
        {"DELETING TASKS"},
        {"  Delete tasks by typing \"delete [task ID]\"."},
        {"  This will permanently delete the task."},
        {"  If you just want to remove it from the task list while keeping the task, use \"mark [task ID] as complete\" instead."},
        {newline},
        {"CHANGING DEFAULT KEYWORDS"},
        {"  You can change any of the default keywords such as \"add\" and \"edit\" to anything you prefer by using" + 
        " the following format:"},
        {"  addShortcut [new keyword] onto [existing keyword]"},
        {"      eg. \"addKeyword create onto add\""},
        {newline},
        {"ADDING TASK TEMPLATES"},
        {"  You can save existing tasks as templates by typing \"addTemplate [task ID] as [template name]\"."},
        {"      eg. \"addTemplate 12 as meeting with boss\"."},
        {"  This will save the task with all the details intact."},
        {"  When you use a template to create a new task, all you need to do is input " + 
        "\"useTemplate [template name] [date]\" to duplicate the task."},
        {newline},
        {"For the full list of available keywords and functions, type \"viewShortcut\"."},
        { "Please consult the User Guide for additional help and functionality."}
    };

    private static final Color TASK_FONT_COLOR= new Color(46,67,113); 
    private static final Color TASK_BG= new Color(160, 212, 237); 
    private static final Color TASK_BG2 = new Color(255,255,255); 
    private static final Color TASK_GRID= new Color(73, 159, 201);
    private static final Color TASK_OVERDUE= new Color(255, 180, 94);
    private static final Color TASK_TEMPLATE= new Color(217, 221, 251);

    private static final Color SHORTCUT_FONT_COLOR = new  Color(46,67,113); 
    private static final Color SHORTCUT_BG = new Color(160, 212, 237); 
    private static final Color SHORTCUT_BG2 = new Color(255,255,255);
    private static final Color SHORTCUT_GRID = new Color(115, 184, 218);

    private static final Color TABLE_HEADER_BG = new Color(255, 208, 85);
    private static final Color TABLE_HEADER_FONT = new Color(44,72,111); 

    private static final Color FEEDBACK_FONT_COLOR = new Color(44,72,111); 
    private static final Color FEEDBACK = new Color(255, 208, 85);

    private static final Color INPUT_FONT_COLOR = new Color(44,72,111); 
    private static final Color INPUT = new Color(255, 255, 255);

    private static final Color OUTPUT_FONT_COLOR = new Color(46,67,113);  
    private static final Color OUTPUT_BG = new Color(255,255,255); 

    private static final Font TABLE_FONT = new Font("Arial", Font.BOLD, 15);
    private static final Font TEXTBOX_FONT =  new Font("Verdana", Font.PLAIN, 18);
    private static final Font FEEDBACK_FONT = new Font("Candara", Font.BOLD, 20);

    private static final String FN_DELETE = "delete %1$s";
    private static final String FN_MARK = "mark %1$s as complete";
    private static final String FN_EDIT = "edit %1$s ";
    private static final String FN_UNDO = "undo";
    private static final String FN_REDO = "redo";
    private static final String FN_VIEW = "viewTask";



    /**
     * Create the application.
     */
    public UserInterface() {
        initialize();
    }

    /**
     * Gets user input as a string.
     * 
     * @return
     */
    public String getRawUserInput() {
        return prevInput_;
    }

    /**
     * Converts Tasks to String[] and moves the affected tasks to the top of the ArrayList to be displayed.
     *Passes formatted ArrayList to TaskTableModel to be displayed.
     *
     * @param affectedTask.
     * @param fullListTask.
     * @param status.
     */
    public void  displayTaskTable(ArrayList<Task> affectedTask, ArrayList<Task> fullListTask, int status) {
        viewTaskTable();
        ArrayList<String[]> outputDataString = new ArrayList<String[]>();

        if (fullListTask.size() == 0) {
            //if there are no tasks to be displayed 
            displayText(NO_TASKS, true);
        } else if (affectedTask == null) {
            //displays task list
            convertTaskToString(fullListTask, outputDataString);
        } else {
            //if there are edited/affected tasks, display them first
            convertTaskToString(affectedTask, outputDataString);
            outputDataString.add(EMPTYROW);	
            for (int i = 0 ; i < fullListTask.size(); i++) {
                String[] strArray = fullListTask.get(i).toStringArray();
                if (!isAlreadyAdded(strArray, outputDataString)) {
                    outputDataString.add(strArray);
                }
            }
        }

        model_.refreshTable(outputDataString);
    }

    /**
     * Converts ArrayList<Task> to ArrayList<String>.
     * 
     */
    private void convertTaskToString(ArrayList<Task> fullListTask,
            ArrayList<String[]> outputDataString) {
        for (int i = 0 ; i < fullListTask.size(); i++) {
            outputDataString.add(fullListTask.get(i).toStringArray());
        }
    }

    /**
     * Checks if array already contains the task.
     * 
     * @param task.
     * @param taskOutput.
     * @return True if tasks is present.
     */
    private boolean isAlreadyAdded(String[] task, ArrayList<String[]> taskOutput) {
        for (String[] t: taskOutput) {
            if (Arrays.equals(task, t)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Displays a table of shortcuts with 2 columns.
     * 
     * @param outputData.
     * @param success.
     */
    public void displayKeywords(String[][] outputData, boolean success) {
        viewShortcutTable();
        String[] keywords;
        ArrayList<String[]> outputDataString = new ArrayList<String[]>();

        for (int i = 0; i < outputData.length; i++) {
            keywords= new String[2];

            String[] strArray = outputData[i];
            keywords[0] = SYS_KEYWORDS[Integer.parseInt(strArray[0])];
            String nextLine = "";

            for (int j = 1; j < strArray.length; j++) {
                nextLine += "'" + strArray[j] + "'" + " || " ;
            }

            keywords[1] = nextLine.substring(0, nextLine.length() - 3);
            outputDataString.add(keywords);
        }
        model_.refreshTable(outputDataString);				
    }

    /**
     * Displays a paragraph of text in the Text Pane.
     * 
     * @param outputData.
     * @param success.
     */
    public void displayText(String[][] outputData, boolean success) {
        clearTextPane();
        viewTextPane();
        DefaultCaret caret = (DefaultCaret)outputArea_.getCaret();
        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);

        for (int i = 0; i < outputData.length; i++ ) {
            String[] strArray = outputData[i];
            String nextLine = "";
            for (int j = 0; j < strArray.length; j++ ) {
                nextLine += " " + strArray[j];
            }
            outputArea_.append(nextLine + newline);
        }
    }

    /**
     * Displays multiple lines of feedback in feedback pane.
     * 
     * @param outputData.
     * @param success.
     */
    public void displayMsg(String[] outputData, int success) {
        clearFeedbackArea();     
        String display = "";

        for (int i = 0; i < outputData.length; i++ ) {
            display += outputData[i]+"\n";
        }
        sysFeedbackArea_.setText(display);
    }

    /**
     * Displays a single line of feedback in the feedback pane.
     * 
     * @param outputData.
     * @param success.
     */
    public void displayMsg(String outputData, int success) {
        clearFeedbackArea();     
        sysFeedbackArea_.setText(outputData);
    }

    /**
     * Replaces Task ID with template names and displays it in the table model.
     * 
     * @param outputData.
     * @param templateName.
     * @param success.
     */
    public void displayTemplate(ArrayList<Task> outputData, ArrayList<String> templateName, boolean success) {
        viewTaskTable();
        ArrayList<String[]> outputDataString = new ArrayList<String[]>();

        for (int i = 0 ; i < outputData.size(); i++) {
            //converts outputData to String and replaces TaskID with templateName
            outputDataString.add(outputData.get(i).toStringArray());
            outputDataString.get(i)[0] = templateName.get(i);
        }
        model_.refreshTable(outputDataString);
    }

    /**
     * Launch the application.
     * *Only used when testing UI*
     */
    /*
	// End of segment: ../src/\UserInterface.java





